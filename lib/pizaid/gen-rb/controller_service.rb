#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'controller_types'

module Pizaid
  module ControllerService
    class Client
      include ::Thrift::Client

      def network_get_ipv4()
        send_network_get_ipv4()
        return recv_network_get_ipv4()
      end

      def send_network_get_ipv4()
        send_message('network_get_ipv4', Network_get_ipv4_args)
      end

      def recv_network_get_ipv4()
        result = receive_message(Network_get_ipv4_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'network_get_ipv4 failed: unknown result')
      end

      def network_get_ipv6()
        send_network_get_ipv6()
        return recv_network_get_ipv6()
      end

      def send_network_get_ipv6()
        send_message('network_get_ipv6', Network_get_ipv6_args)
      end

      def recv_network_get_ipv6()
        result = receive_message(Network_get_ipv6_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'network_get_ipv6 failed: unknown result')
      end

      def storage_names()
        send_storage_names()
        return recv_storage_names()
      end

      def send_storage_names()
        send_message('storage_names', Storage_names_args)
      end

      def recv_storage_names()
        result = receive_message(Storage_names_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'storage_names failed: unknown result')
      end

      def storage_capacity_kb(key)
        send_storage_capacity_kb(key)
        return recv_storage_capacity_kb()
      end

      def send_storage_capacity_kb(key)
        send_message('storage_capacity_kb', Storage_capacity_kb_args, :key => key)
      end

      def recv_storage_capacity_kb()
        result = receive_message(Storage_capacity_kb_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'storage_capacity_kb failed: unknown result')
      end

      def storage_usage_kb(key)
        send_storage_usage_kb(key)
        return recv_storage_usage_kb()
      end

      def send_storage_usage_kb(key)
        send_message('storage_usage_kb', Storage_usage_kb_args, :key => key)
      end

      def recv_storage_usage_kb()
        result = receive_message(Storage_usage_kb_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'storage_usage_kb failed: unknown result')
      end

      def storage_usage_percent(key)
        send_storage_usage_percent(key)
        return recv_storage_usage_percent()
      end

      def send_storage_usage_percent(key)
        send_message('storage_usage_percent', Storage_usage_percent_args, :key => key)
      end

      def recv_storage_usage_percent()
        result = receive_message(Storage_usage_percent_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'storage_usage_percent failed: unknown result')
      end

      def storage_is_sync()
        send_storage_is_sync()
        return recv_storage_is_sync()
      end

      def send_storage_is_sync()
        send_message('storage_is_sync', Storage_is_sync_args)
      end

      def recv_storage_is_sync()
        result = receive_message(Storage_is_sync_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'storage_is_sync failed: unknown result')
      end

      def storage_join(key, device)
        send_storage_join(key, device)
        return recv_storage_join()
      end

      def send_storage_join(key, device)
        send_message('storage_join', Storage_join_args, :key => key, :device => device)
      end

      def recv_storage_join()
        result = receive_message(Storage_join_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'storage_join failed: unknown result')
      end

      def storage_devs(key)
        send_storage_devs(key)
        return recv_storage_devs()
      end

      def send_storage_devs(key)
        send_message('storage_devs', Storage_devs_args, :key => key)
      end

      def recv_storage_devs()
        result = receive_message(Storage_devs_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'storage_devs failed: unknown result')
      end

      def storage_dev_id(device)
        send_storage_dev_id(device)
        return recv_storage_dev_id()
      end

      def send_storage_dev_id(device)
        send_message('storage_dev_id', Storage_dev_id_args, :device => device)
      end

      def recv_storage_dev_id()
        result = receive_message(Storage_dev_id_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'storage_dev_id failed: unknown result')
      end

      def storage_dev_size(device)
        send_storage_dev_size(device)
        return recv_storage_dev_size()
      end

      def send_storage_dev_size(device)
        send_message('storage_dev_size', Storage_dev_size_args, :device => device)
      end

      def recv_storage_dev_size()
        result = receive_message(Storage_dev_size_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'storage_dev_size failed: unknown result')
      end

      def power_battery_percent()
        send_power_battery_percent()
        return recv_power_battery_percent()
      end

      def send_power_battery_percent()
        send_message('power_battery_percent', Power_battery_percent_args)
      end

      def recv_power_battery_percent()
        result = receive_message(Power_battery_percent_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'power_battery_percent failed: unknown result')
      end

      def power_is_ac_plugin()
        send_power_is_ac_plugin()
        return recv_power_is_ac_plugin()
      end

      def send_power_is_ac_plugin()
        send_message('power_is_ac_plugin', Power_is_ac_plugin_args)
      end

      def recv_power_is_ac_plugin()
        result = receive_message(Power_is_ac_plugin_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'power_is_ac_plugin failed: unknown result')
      end

    end

    class Processor
      include ::Thrift::Processor

      def process_network_get_ipv4(seqid, iprot, oprot)
        args = read_args(iprot, Network_get_ipv4_args)
        result = Network_get_ipv4_result.new()
        result.success = @handler.network_get_ipv4()
        write_result(result, oprot, 'network_get_ipv4', seqid)
      end

      def process_network_get_ipv6(seqid, iprot, oprot)
        args = read_args(iprot, Network_get_ipv6_args)
        result = Network_get_ipv6_result.new()
        result.success = @handler.network_get_ipv6()
        write_result(result, oprot, 'network_get_ipv6', seqid)
      end

      def process_storage_names(seqid, iprot, oprot)
        args = read_args(iprot, Storage_names_args)
        result = Storage_names_result.new()
        result.success = @handler.storage_names()
        write_result(result, oprot, 'storage_names', seqid)
      end

      def process_storage_capacity_kb(seqid, iprot, oprot)
        args = read_args(iprot, Storage_capacity_kb_args)
        result = Storage_capacity_kb_result.new()
        result.success = @handler.storage_capacity_kb(args.key)
        write_result(result, oprot, 'storage_capacity_kb', seqid)
      end

      def process_storage_usage_kb(seqid, iprot, oprot)
        args = read_args(iprot, Storage_usage_kb_args)
        result = Storage_usage_kb_result.new()
        result.success = @handler.storage_usage_kb(args.key)
        write_result(result, oprot, 'storage_usage_kb', seqid)
      end

      def process_storage_usage_percent(seqid, iprot, oprot)
        args = read_args(iprot, Storage_usage_percent_args)
        result = Storage_usage_percent_result.new()
        result.success = @handler.storage_usage_percent(args.key)
        write_result(result, oprot, 'storage_usage_percent', seqid)
      end

      def process_storage_is_sync(seqid, iprot, oprot)
        args = read_args(iprot, Storage_is_sync_args)
        result = Storage_is_sync_result.new()
        result.success = @handler.storage_is_sync()
        write_result(result, oprot, 'storage_is_sync', seqid)
      end

      def process_storage_join(seqid, iprot, oprot)
        args = read_args(iprot, Storage_join_args)
        result = Storage_join_result.new()
        result.success = @handler.storage_join(args.key, args.device)
        write_result(result, oprot, 'storage_join', seqid)
      end

      def process_storage_devs(seqid, iprot, oprot)
        args = read_args(iprot, Storage_devs_args)
        result = Storage_devs_result.new()
        result.success = @handler.storage_devs(args.key)
        write_result(result, oprot, 'storage_devs', seqid)
      end

      def process_storage_dev_id(seqid, iprot, oprot)
        args = read_args(iprot, Storage_dev_id_args)
        result = Storage_dev_id_result.new()
        result.success = @handler.storage_dev_id(args.device)
        write_result(result, oprot, 'storage_dev_id', seqid)
      end

      def process_storage_dev_size(seqid, iprot, oprot)
        args = read_args(iprot, Storage_dev_size_args)
        result = Storage_dev_size_result.new()
        result.success = @handler.storage_dev_size(args.device)
        write_result(result, oprot, 'storage_dev_size', seqid)
      end

      def process_power_battery_percent(seqid, iprot, oprot)
        args = read_args(iprot, Power_battery_percent_args)
        result = Power_battery_percent_result.new()
        result.success = @handler.power_battery_percent()
        write_result(result, oprot, 'power_battery_percent', seqid)
      end

      def process_power_is_ac_plugin(seqid, iprot, oprot)
        args = read_args(iprot, Power_is_ac_plugin_args)
        result = Power_is_ac_plugin_result.new()
        result.success = @handler.power_is_ac_plugin()
        write_result(result, oprot, 'power_is_ac_plugin', seqid)
      end

    end

    # HELPER FUNCTIONS AND STRUCTURES

    class Network_get_ipv4_args
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Network_get_ipv4_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Network_get_ipv6_args
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Network_get_ipv6_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_names_args
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_names_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_capacity_kb_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      KEY = 1

      FIELDS = {
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_capacity_kb_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_usage_kb_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      KEY = 1

      FIELDS = {
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_usage_kb_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_usage_percent_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      KEY = 1

      FIELDS = {
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_usage_percent_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::BYTE, :name => 'success'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_is_sync_args
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_is_sync_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_join_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      KEY = 1
      DEVICE = 2

      FIELDS = {
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
        DEVICE => {:type => ::Thrift::Types::STRING, :name => 'device'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_join_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_devs_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      KEY = 1

      FIELDS = {
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_devs_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_dev_id_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DEVICE = 1

      FIELDS = {
        DEVICE => {:type => ::Thrift::Types::STRING, :name => 'device'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_dev_id_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_dev_size_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DEVICE = 1

      FIELDS = {
        DEVICE => {:type => ::Thrift::Types::STRING, :name => 'device'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Storage_dev_size_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Power_battery_percent_args
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Power_battery_percent_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::BYTE, :name => 'success'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Power_is_ac_plugin_args
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Power_is_ac_plugin_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end

end
